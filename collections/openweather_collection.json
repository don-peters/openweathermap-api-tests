{
  "info": {
    "name": "OpenWeatherMap API Testing Collection",
    "description": "Comprehensive API testing collection for OpenWeatherMap API with best practices",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "key",
        "value": "appid",
        "type": "string"
      },
      {
        "key": "value",
        "value": "{{API_KEY}}",
        "type": "string"
      },
      {
        "key": "in",
        "value": "query",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://api.openweathermap.org/data/2.5"
    },
    {
      "key": "geoUrl", 
      "value": "https://api.openweathermap.org/geo/1.0"
    },
    {
      "key": "testCity",
      "value": "London"
    },
    {
      "key": "testLat",
      "value": "51.5074"
    },
    {
      "key": "testLon", 
      "value": "-0.1278"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "API Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Content-Type is application/json', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('coord');",
                  "    pm.expect(responseJson).to.have.property('weather');",
                  "    pm.expect(responseJson).to.have.property('main');",
                  "    pm.expect(responseJson).to.have.property('name');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/weather?q={{testCity}}&appid={{API_KEY}}",
              "host": ["{{baseUrl}}"],
              "path": ["weather"],
              "query": [
                {
                  "key": "q",
                  "value": "{{testCity}}"
                },
                {
                  "key": "appid",
                  "value": "{{API_KEY}}"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Current Weather",
      "item": [
        {
          "name": "Get Weather by City Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('City name matches request', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.name.toLowerCase()).to.include(pm.collectionVariables.get('testCity').toLowerCase());",
                  "});",
                  "",
                  "pm.test('Temperature is a number', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.main.temp).to.be.a('number');",
                  "});",
                  "",
                  "pm.test('Weather description exists', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.weather[0].description).to.be.a('string');",
                  "    pm.expect(responseJson.weather[0].description.length).to.be.above(0);",
                  "});",
                  "",
                  "pm.test('Coordinates are valid', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.coord.lat).to.be.within(-90, 90);",
                  "    pm.expect(responseJson.coord.lon).to.be.within(-180, 180);",
                  "});",
                  "",
                  "// Store coordinates for next request",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set('retrievedLat', responseJson.coord.lat);",
                  "    pm.collectionVariables.set('retrievedLon', responseJson.coord.lon);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/weather?q={{testCity}}&units=metric",
              "host": ["{{baseUrl}}"],
              "path": ["weather"],
              "query": [
                {
                  "key": "q",
                  "value": "{{testCity}}"
                },
                {
                  "key": "units",
                  "value": "metric"
                }
              ]
            }
          }
        },
        {
          "name": "Get Weather by Coordinates",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Coordinates match request', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const requestedLat = parseFloat(pm.collectionVariables.get('testLat'));",
                  "    const requestedLon = parseFloat(pm.collectionVariables.get('testLon'));",
                  "    ",
                  "    // Allow for some precision difference",
                  "    pm.expect(Math.abs(responseJson.coord.lat - requestedLat)).to.be.below(0.1);",
                  "    pm.expect(Math.abs(responseJson.coord.lon - requestedLon)).to.be.below(0.1);",
                  "});",
                  "",
                  "pm.test('Temperature is in Kelvin by default', function () {",
                  "    const responseJson = pm.response.json();",
                  "    // Kelvin temperatures are typically above 200",
                  "    pm.expect(responseJson.main.temp).to.be.above(200);",
                  "});",
                  "",
                  "pm.test('Response schema validation', function () {",
                  "    const schema = {",
                  "        type: 'object',",
                  "        required: ['coord', 'weather', 'main', 'visibility', 'wind', 'clouds', 'dt', 'sys', 'timezone', 'id', 'name', 'cod'],",
                  "        properties: {",
                  "            coord: {",
                  "                type: 'object',",
                  "                required: ['lon', 'lat']",
                  "            },",
                  "            weather: {",
                  "                type: 'array',",
                  "                minItems: 1",
                  "            },",
                  "            main: {",
                  "                type: 'object',",
                  "                required: ['temp', 'feels_like', 'temp_min', 'temp_max', 'pressure', 'humidity']",
                  "            }",
                  "        }",
                  "    };",
                  "    ",
                  "    pm.response.to.have.jsonSchema(schema);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/weather?lat={{testLat}}&lon={{testLon}}",
              "host": ["{{baseUrl}}"],
              "path": ["weather"],
              "query": [
                {
                  "key": "lat",
                  "value": "{{testLat}}"
                },
                {
                  "key": "lon",
                  "value": "{{testLon}}"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Geocoding",
      "item": [
        {
          "name": "Get Coordinates by City Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "    pm.expect(responseJson.length).to.be.above(0);",
                  "});",
                  "",
                  "pm.test('First result has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const firstResult = responseJson[0];",
                  "    ",
                  "    pm.expect(firstResult).to.have.property('name');",
                  "    pm.expect(firstResult).to.have.property('lat');",
                  "    pm.expect(firstResult).to.have.property('lon');",
                  "    pm.expect(firstResult).to.have.property('country');",
                  "});",
                  "",
                  "pm.test('Coordinates are valid numbers', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const firstResult = responseJson[0];",
                  "    ",
                  "    pm.expect(firstResult.lat).to.be.a('number');",
                  "    pm.expect(firstResult.lon).to.be.a('number');",
                  "    pm.expect(firstResult.lat).to.be.within(-90, 90);",
                  "    pm.expect(firstResult.lon).to.be.within(-180, 180);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{geoUrl}}/direct?q={{testCity}}&limit=5",
              "host": ["{{geoUrl}}"],
              "path": ["direct"],
              "query": [
                {
                  "key": "q",
                  "value": "{{testCity}}"
                },
                {
                  "key": "limit",
                  "value": "5"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Error Handling",
      "item": [
        {
          "name": "Invalid API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is present', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('Invalid API key');",
                  "});",
                  "",
                  "pm.test('Error code is present', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('cod');",
                  "    pm.expect(responseJson.cod).to.equal(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/weather?q={{testCity}}&appid=invalid_key",
              "host": ["{{baseUrl}}"],
              "path": ["weather"],
              "query": [
                {
                  "key": "q",
                  "value": "{{testCity}}"
                },
                {
                  "key": "appid",
                  "value": "invalid_key"
                }
              ]
            }
          }
        },
        {
          "name": "City Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message indicates city not found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('not found');",
                  "});",
                  "",
                  "pm.test('Error code is 404', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('cod');",
                  "    pm.expect(responseJson.cod).to.equal('404');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/weather?q=NonExistentCityXYZ123",
              "host": ["{{baseUrl}}"],
              "path": ["weather"],
              "query": [
                {
                  "key": "q",
                  "value": "NonExistentCityXYZ123"
                }
              ]
            }
          }
        },
        {
          "name": "Invalid Coordinates",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message is present', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});",
                  "",
                  "pm.test('Error code indicates bad request', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('cod');",
                  "    pm.expect(responseJson.cod).to.equal('400');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/weather?lat=invalid&lon=invalid",
              "host": ["{{baseUrl}}"],
              "path": ["weather"],
              "query": [
                {
                  "key": "lat",
                  "value": "invalid"
                },
                {
                  "key": "lon",
                  "value": "invalid"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Performance Tests",
      "item": [
        {
          "name": "Response Time Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response time is acceptable (< 1000ms)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Log performance metrics",
                  "console.log(`Response time: ${pm.response.responseTime}ms`);",
                  "console.log(`Response size: ${pm.response.responseSize} bytes`);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/weather?q={{testCity}}",
              "host": ["{{baseUrl}}"],
              "path": ["weather"],
              "query": [
                {
                  "key": "q",
                  "value": "{{testCity}}"
                }
              ]
            }
          }
        }
      ]
    }
  ]
}