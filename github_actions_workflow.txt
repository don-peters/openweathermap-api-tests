name: OpenWeatherMap API Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  api-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Newman
      run: |
        npm install -g newman
        npm install -g newman-reporter-htmlextra
        
    - name: Create reports directory
      run: mkdir -p reports
      
    - name: Run API Tests
      env:
        API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
      run: |
        newman run collection/openweathermap-collection.json \
          --environment environment/openweather-environment.json \
          --env-var "API_KEY=$API_KEY" \
          --reporters cli,htmlextra,json \
          --reporter-htmlextra-export reports/api-test-report.html \
          --reporter-json-export reports/api-test-results.json \
          --bail \
          --timeout 30000
          
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-test-reports
        path: reports/
        
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: API Test Results
        path: reports/api-test-results.json
        reporter: newman
        
    - name: Comment PR with results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const results = JSON.parse(fs.readFileSync('reports/api-test-results.json', 'utf8'));
            const run = results.run;
            
            const totalTests = run.stats.tests.total;
            const passedTests = run.stats.tests.total - run.stats.tests.failed;
            const failedTests = run.stats.tests.failed;
            
            const comment = `## üß™ API Test Results
            
            **Summary:**
            - ‚úÖ Passed: ${passedTests}
            - ‚ùå Failed: ${failedTests}  
            - üìä Total: ${totalTests}
            - ‚è±Ô∏è Duration: ${Math.round(run.timings.completed - run.timings.started)}ms
            
            **Collection:** ${run.collection.info.name}
            
            ${failedTests > 0 ? '‚ùó Some tests failed. Check the detailed report in the Actions artifacts.' : 'üéâ All tests passed!'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not post test results:', error.message);
          }

  security-scan:
    runs-on: ubuntu-latest
    needs: api-tests
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run security scan on collection
      run: |
        # Check for hardcoded secrets (basic scan)
        if grep -r "sk_" collection/ || grep -r "pk_" collection/ || grep -r "password" collection/; then
          echo "‚ö†Ô∏è Potential secrets found in collection files"
          exit 1
        else
          echo "‚úÖ No obvious secrets detected"
        fi
        
    - name: Validate JSON files
      run: |
        for file in collection/*.json environment/*.json; do
          if [ -f "$file" ]; then
            echo "Validating $file"
            if ! python -m json.tool "$file" > /dev/null; then
              echo "‚ùå Invalid JSON: $file"
              exit 1
            fi
          fi
        done
        echo "‚úÖ All JSON files are valid"